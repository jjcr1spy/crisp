// quicksort.usc
// Implements in-place quicksort algorithm
// Expected result:
// 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
//---------------------------------------------------------
// Copyright (c) 2014, Sanjay Madhav
// All rights reserved.
//
// This file is distributed under the BSD license.
// See LICENSE.TXT for details.
//---------------------------------------------------------

int partition(int array[], int left, int right, int pivotIdx) {
	int pivotVal = array[pivotIdx];
	int storeIdx = left;
	int i = left;
	int temp;
	
	// Move pivot to end
	temp = array[pivotIdx];
	array[pivotIdx] = array[right];
	array[right] = temp;
	
	while (i < right) {
		if (array[i] < pivotVal) {
			// Swap array[i] and array[storeIdx]
			temp = array[i];
			array[i] = array[storeIdx];
			array[storeIdx] = temp;
			++storeIdx;
		}
		
		++i;
	}
	
	// Swap array[storeIdx] and array[right]
	temp = array[storeIdx];
	array[storeIdx] = array[right];
	array[right] = temp;
	
	return storeIdx;
}

void quicksort(int array[], int left, int right) {
	int pivotIdx;
	
	if (left < right) {
		// Pick the middle point
		pivotIdx = left + (right - left) / 2;
		
		pivotIdx = partition(array, left, right, pivotIdx);
		quicksort(array, left, pivotIdx - 1);
		quicksort(array, pivotIdx + 1, right);
	}
}

int main() {
	int sort[35];

	int i = 0;
	while (i < 35) {
		sort[i] = 35 - i;
		++i;
	}

	quicksort(sort, 0, 34);
	
	i = 0;
	while (i < 35) {
		printf("%d ", sort[i]);
		//++i;
	}

	printf("\n");

	return 0;
}
